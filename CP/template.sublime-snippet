<snippet>
    <content><![CDATA[
#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <chrono>
#include <cmath>
#include <cstring>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <random>
#include <set>
#include <vector>
using namespace std;
using uint = unsigned int;
using ll = long long;
using ull = unsigned long long;

template<typename A, typename B>
ostream& operator<<(ostream &os, const pair<A, B> &p) {
    return os << '(' << p.first << ", " << p.second << ')';
}
template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type>
ostream& operator<<(ostream &os, const T_container &v) {
    cerr << boolalpha;
    os << '{';
    string sep;
    for (const T &x : v)
        os << sep << x, sep = ", ";
    return os << '}';
}

void dbg_out() {
    cerr << endl;
}
template<typename Head, typename... Tail>
void dbg_out(Head H, Tail... T) {
    cerr << ' ' << H;
    dbg_out(T...);
}
#ifdef DEBUG
    #define dbg(...) cerr << "[" << __LINE__ << "]: (" << #__VA_ARGS__ << "):", dbg_out(__VA_ARGS__)
#else
    #define dbg(...)
#endif

void test_case([[maybe_unused]] int _tt) {
    ${0://code;}
}

int main() {
    cin.tie(0)->sync_with_stdio(0); // cout << fixed << setprecision(15);
    int TT = 1;
    ${1:cin >> TT;}
    for (int _tt = 1; _tt <= TT; ++_tt) {
        test_case(_tt);
    }
    return 0;
}
]]></content>
    <tabTrigger>cpt</tabTrigger>
    <scope>source.c++</scope>
</snippet>
