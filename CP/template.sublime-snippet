<snippet>
    <content><![CDATA[
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
using ll = long long;
using ordered_set = tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>;

mt19937_64 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());
template <class T>
T generate(T lower, T upper) {
    return uniform_int_distribution<T>(lower, upper)(rng);
}


void test_case([[maybe_unused]] int _tt) {
    ${0://code;}
}

int main() {
    cin.tie(0)->sync_with_stdio(0); // cout << fixed << setprecision(15);
    int TT = 1;
    ${1:cin >> TT;}
    for (int _tt = 1; _tt <= TT; ++_tt) {
        test_case(_tt);
    }
    return 0;
}
]]></content>
    <tabTrigger>cpt</tabTrigger>
    <scope>source.c++</scope>
</snippet>
